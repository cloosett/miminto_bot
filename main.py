import telebot
import sqlite3
from telebot import types
bot = telebot.TeleBot('6295031831:AAGdNMyVyVbEPUlp6mkK62izJ3Dgmpz037M')

yearsanketa = None
nameanketa = None
mistoanketa = None
statanketa = None

namechange = None
yearschange = None
mistochange = None
statanketa = None

ratings = None
anketa_owner_id = None


admin_id = [889166677]
idupdate = None
nameupdate = None
yearsupdate = None
mistoupdate = None
statupdate = None


@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id in admin_id:
        bot.send_message(message.chat.id, "–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")
        bot.send_message(message.chat.id, 'bot ID (9 number): ')
        bot.register_next_step_handler(message, updateid)
    else:
        bot.send_message(message.chat.id, "–¢–∏ –Ω–µ –∞–¥–º—ñ–Ω!")

def updateid(message):
    global idupdate
    idupdate = message.text
    if len(idupdate) == 9:
        bot.send_message(message.chat.id, 'bot name:')
    else:
        bot.send_message(message.chat.id, 'id 9 number')
        bot.register_message_handler(message, updateid)
        return
    bot.register_next_step_handler(message, updatename)

def updatename(message):
    global nameupdate
    nameupdate = message.text
    bot.send_message(message.chat.id, 'bot year:')
    bot.register_next_step_handler(message, updateyears)


def updateyears(message):
    global yearsupdate
    yearsupdate = message.text
    if not yearsupdate.isdigit():
        bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —Ü–∏—Ñ—Ä–æ—é.')
        bot.register_next_step_handler(message, updateyears)
        return
    bot.send_message(message.chat.id, 'bot city:')
    bot.register_next_step_handler(message, updatemisto)

def updatemisto(message):
    global mistoupdate
    mistoupdate = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üë¶')
    btn2 = types.KeyboardButton('üëß')
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id, 'bot stat:', reply_markup=markup)
    bot.register_next_step_handler(message, updatestat)
def updatestat(message):
    global statupdate
    statupdate = message.text
    bot.send_message(message.chat.id, 'bot photo:')
    bot.register_next_step_handler(message, updatephoto)



@bot.message_handler(content_types=['photo'])
def updatephoto(message):
    try:
        conn = sqlite3.connect('bibintobot.db')
        cursor = conn.cursor()

        photo = message.photo[-1]
        file_id = photo.file_id

        cursor.execute('INSERT INTO bibintobot (id, name, years, city, stat, photograf) VALUES (?, ?, ?, ?, ?, ?)',
                       (idupdate, nameupdate, yearsupdate, mistoupdate, statupdate, file_id))
        conn.commit()

        cursor.close()
        bot.send_message(message.chat.id, '–ê–Ω–∫–µ—Ç–∞ –±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞. –ü—Ä–æ–¥–æ–≤–∂–∏ /start')
    except TypeError:
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é")

@bot.message_handler(commands=['rozsilka'])
def handle_broadcast(message):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–±–æ –±—É–¥—å-—è–∫—É —ñ–Ω—à—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —è–∫—É –≤–∏ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ)
    if message.from_user.id == 889166677:  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –∞–π–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        # –°–ø–∏—Å–æ–∫ –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        user_ids = ['5841810263, 738790196, 1282078626, 1215192017, 969154976, 933312481, 889166677, 845289723, 812270609']  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –∞–π–¥—ñ

        # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        message_text = '–í–∞—à—É –∞–Ω–∫–µ—Ç—É –æ—Ü—ñ–Ω–∏–ª–∏: –ù–æ—Ä–º–∞–ª—å–Ω–æüëç'

        for user_id in user_ids:
            bot.send_message(chat_id=user_id, text=message_text)

    else:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.')
# –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü, –û–ë–†–û–ë–ù–ò–ö –ö–û–ú–ê–ù–î–ò START
@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('bibintobot.db')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS bibintobot (id INTEGER PRIMARY KEY, name varchar(20), years int, city varchar(50), photograf TEXT, stat varchar(20), rated int, user_id int, rated_by int)')
    cur.close()
    conn.close()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§')
    btn2 = types.KeyboardButton('–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ')
    markup.row(btn1,btn2)
    btn3 = types.KeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—Éüòá')
    btn4 = types.KeyboardButton('–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ')
    markup.row(btn3, btn4)
    btn5 = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã')
    markup.row(btn5)
    bot.send_message(message.chat.id, 'üëã –í–æ–≤.., —Ç–∏ –ø–æ–ø–∞–≤ —É –ú—ñ–º—ñ–Ω—Ç–æ –±–æ—Ç \n\n üìä –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∞–Ω–æ–Ω—ñ–º–Ω–æ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ –ª—é–¥–µ–π, –∞ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å –∞–Ω–æ–Ω—ñ–º–Ω–æ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ —Ç–µ–±–µüòâ ', reply_markup=markup)
    bot.register_next_step_handler(message, bibinto)

# –û–ë–†–û–ë–ù–ò–ö –ö–ù–û–ü–û–ö
def bibinto(message):
    if message.text == '–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§':
        profileanketa(message)
    if message.text == '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—Éüòá':
        conn = sqlite3.connect('bibintobot.db')
        cursor = conn.cursor()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute('SELECT id FROM bibintobot WHERE id = ?', (message.from_user.id,))
        result = cursor.fetchone()

        if result is None:
            bot.send_message(message.chat.id, '–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?ü§î: ')
            bot.register_next_step_handler(message, anketaname)
        else:
            bot.send_message(message.chat.id, '–ê–Ω–∫–µ—Ç–∞ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–∞–Ω–æ–≤–æ.')
            bot.register_next_step_handler(message,bibinto)

        conn.close()
    if message.text == '–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ':
        rating(message)
    if message.text == '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ':
        bot.send_message(message.chat.id, '–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?ü§î: ')
        bot.register_next_step_handler(message,changename)
    if message.text == '–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã':
        refka(message)
# –ü–û–ö–ê–ó –ü–†–û–§–Ü–õ–Æ

def profile(message):
    conn = sqlite3.connect('bibintobot.db')
    cursor = conn.cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT photograf, name, years, city, stat FROM bibintobot WHERE id = ?", (user_id,))
    rows = cursor.fetchall()

    if rows:
        for row in rows:
            file_id, name, years, city, stat = row
            bot.send_photo(message.chat.id, file_id, caption=f'‚òòÔ∏è–ò–º—è: {name}, {years} —Ä–æ–∫—ñ–≤\n\n üåá–ú—ñ—Å—Ç–æ: {city} \n\n ‚≠ê–°—Ç–∞—Ç—å: {stat}')
    else:
        bot.send_message(message.chat.id, '–ê–Ω–∫–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ‚ùå, –°—Ç–≤–æ—Ä—ñ—Ç—å —ó—óüòÅ')
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ê–Ω–∫–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        bot.register_next_step_handler(message, bibinto)
        return
    cursor.close()
    conn.close()

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ—Å–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ê–Ω–∫–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫üëç"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§')
    btn2 = types.KeyboardButton('–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ')
    markup.row(btn1, btn2)
    btn3 = types.KeyboardButton('–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ')
    btn4 = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã')
    markup.row(btn3,btn4)
    bot.send_message(message.chat.id, '–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫üëç', reply_markup=markup)
    bot.register_next_step_handler(message, bibinto)



def anketaname(message):
    global nameanketa
    nameanketa = message.text
    bot.send_message(message.chat.id, '–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?ü§®')
    bot.register_next_step_handler(message, years)

def years(message):
    global yearsanketa
    yearsanketa = message.text
    if not yearsanketa.isdigit():
        bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —Ü–∏—Ñ—Ä–æ—é.')
        bot.register_next_step_handler(message, years)
        return
    bot.send_message(message.chat.id, '–ó–≤—ñ–¥–∫–∏ –≤–∏?üåÜ ')
    bot.register_next_step_handler(message, statik)

def statik(message):
    global statanketa
    statanketa = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üë¶')
    btn2 = types.KeyboardButton('üëß')
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id, '–í–∞—à–∞ —Å—Ç–∞—Ç—åüë•:', reply_markup=markup)
    bot.register_next_step_handler(message, misto)

def misto(message):
    global mistoanketa
    mistoanketa = message.text
    bot.send_message(message.chat.id, '–í–∞—à–µ —Ñ–æ—Ç–æüì∑:')
    bot.register_next_step_handler(message, photografiya)


# –û–ë–†–û–ë–ù–ò–ö –§–û–¢–û / –Ü –ó–ê–ü–û–í–ù–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü
@bot.message_handler(content_types=['photo'])
def photografiya(message):
    try:
        conn = sqlite3.connect('bibintobot.db')
        cursor = conn.cursor()
        photo = message.photo[-1]
        file_id = photo.file_id

        cursor.execute(
            'INSERT INTO bibintobot (id, name, years, city, stat, photograf, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)',
            (message.from_user.id, nameanketa, yearsanketa, statanketa, mistoanketa, file_id, message.from_user.id))

        conn.commit()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§')
        btn2 = types.KeyboardButton('–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ')
        markup.row(btn1, btn2)
        btn3 = types.KeyboardButton('–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ')
        btn4 = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã')
        markup.row(btn3,btn4)
        bot.send_message(message.chat.id, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞‚úîÔ∏è', reply_markup=markup)
        bot.register_next_step_handler(message, bibinto)
    except TypeError:
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é")
        bot.register_next_step_handler(message,photografiya)
        return

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –∞–Ω–∫–µ—Ç–∏
def rating(message):
    conn = sqlite3.connect('bibintobot.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS ratings
                      (anketa_id INTEGER, user_id INTEGER)''')

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cursor.execute("SELECT id FROM bibintobot WHERE id = ? AND user_id = ?", (message.from_user.id, message.from_user.id))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, '–©–æ–± –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏, —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–Ω–∫–µ—Ç—É.')
        return

    cursor.execute(
        "SELECT id, photograf, name, years, city, stat FROM bibintobot WHERE id NOT IN (SELECT anketa_id FROM ratings WHERE user_id = ?) AND id != ? ORDER BY RANDOM() LIMIT 1",
        (message.from_user.id, message.from_user.id))
    row = cursor.fetchone()
    if row:
        anketa_id, file_id, name, years, city, stat = row
        bot.send_photo(message.chat.id, file_id,
                       caption=f'‚òòÔ∏è–Ü–º\'—è: {name}, {years} —Ä–æ–∫—ñ–≤\n\n ‚≠ê–°—Ç–∞—Ç—å: {stat} \n\n üåá–ú—ñ—Å—Ç–æ: {city}')

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–Ω–∫–µ—Ç–∏
        cursor.execute("INSERT INTO ratings (anketa_id, user_id) VALUES (?, ?)", (anketa_id, message.from_user.id))
        conn.commit()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ì–∞—Ä–Ω–æüëç')
        btn2 = types.KeyboardButton('–ù–æ—Ä–º–∞–ª—å–Ω–æüëç')
        markup.row(btn1, btn2)
        btn3 = types.KeyboardButton('–ü–æ–≥–∞–Ω–æüëé')
        markup.row(btn3)
        bot.send_message(message.chat.id, '–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞ü§®:', reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: handle_rating(msg, anketa_id))
    else:
        # –Ø–∫—â–æ –∞–Ω–∫–µ—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§')
        btn2 = types.KeyboardButton('–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ')
        markup.row(btn1, btn2)
        btn3 = types.KeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—Éüòá')
        btn4 = types.KeyboardButton('–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ')
        markup.row(btn3, btn4)
        btn5 = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã')
        markup.row(btn5)
        bot.send_message(message.chat.id, '–ê–Ω–∫–µ—Ç –Ω–µ–º–∞—î, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µüßê', reply_markup=markup)
        bot.register_next_step_handler(message, bibinto)



def changename(message):
    global namechange
    namechange = message.text
    bot.send_message(message.chat.id, '–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?ü§®')
    bot.register_next_step_handler(message, changeyears)

def changeyears(message):
    global yearschange
    yearschange = message.text
    if not yearschange.isdigit():
        bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —Ü–∏—Ñ—Ä–æ—é.')
        bot.register_next_step_handler(message, changeyears)
        return
    bot.send_message(message.chat.id, '–ó–≤—ñ–¥–∫–∏ –≤–∏?üåÜ ')
    bot.register_next_step_handler(message, —Åhangestat)

def —Åhangestat(message):
    global statchange
    statchange = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üë¶')
    btn2 = types.KeyboardButton('üëß')
    markup.row(btn1,btn2)
    bot.send_message(message.chat.id, '–í–∞—à–∞ —Å—Ç–∞—Ç—åüë•:', reply_markup=markup)
    bot.register_next_step_handler(message, changemisto)


def changemisto(message):
    global mistochange
    mistochange = message.text
    bot.send_message(message.chat.id, '–í–∞—à–µ —Ñ–æ—Ç–æüì∑:')
    bot.register_next_step_handler(message,changephoto)

@bot.message_handler(content_types=['photo'])
def changephoto(message):
    try:
        conn = sqlite3.connect('bibintobot.db')
        cursor = conn.cursor()

        photo = message.photo[-1]
        file_id = photo.file_id
        cursor.execute('DELETE FROM bibintobot WHERE id = ?', (message.from_user.id,))
        cursor.execute('INSERT INTO bibintobot (id, name, years, city, stat, photograf) VALUES (?, ?, ?, ?, ?, ?)',
                       (message.from_user.id, namechange, yearschange, statchange, mistochange, file_id))
        conn.commit()

        cursor.close()


        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§')
        btn2 = types.KeyboardButton('–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ')
        markup.row(btn1, btn2)
        btn3 = types.KeyboardButton('–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ')
        btn4 = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã')
        markup.row(btn3,btn4)
        bot.send_message(message.chat.id, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞‚úîÔ∏è', reply_markup=markup)
        bot.register_next_step_handler(message, bibinto)
    except TypeError:
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é")
        bot.register_next_step_handler(message, changephoto)


def handle_rating(message, anketa_id):
    conn = sqlite3.connect('bibintobot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM bibintobot WHERE id = ?", (anketa_id,))
    anketa_owner_name = cursor.fetchone()[0]
    cursor.close()

    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§')
        btn2 = types.KeyboardButton('–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ')
        markup.row(btn1, btn2)
        btn3 = types.KeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—Éüòá')
        btn4 = types.KeyboardButton('–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ')
        markup.row(btn3, btn4)
        btn5 = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã')
        markup.row(btn5)
        bot.send_message(anketa_id, f"–í–∞—à—É –∞–Ω–∫–µ—Ç—É –æ—Ü—ñ–Ω–∏–ª–∏: {message.text}", reply_markup=markup)
        bot.register_next_step_handler(message, bibinto)
    except Exception as e:
        print(e)  # –ú–ë –ß–ï–†–ï–ó –¶–Æ –ü–û–ú–ò–õ–ö–ò –ú–û–ñ–ï –ù–ê –•–û–°–¢–ò–ù–ì –ù–ï –õ–ò–¢–ò–°–¨

    rating(message)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é rating() –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏


@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§')
    btn2 = types.KeyboardButton('–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ')
    markup.row(btn1, btn2)
    btn3 = types.KeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—Éüòá')
    btn4 = types.KeyboardButton('–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ')
    markup.row(btn3, btn4)
    btn5 = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã')
    markup.row(btn5)
    bot.send_message(message.chat.id, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', reply_markup=markup)
    bot.register_next_step_handler(message, bibinto)


@bot.message_handler(commands=['profile'])
def profileanketa(message):
    conn = sqlite3.connect('bibintobot.db')
    cursor = conn.cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT photograf, name, years, city, stat FROM bibintobot WHERE id = ?", (user_id,))
    rows = cursor.fetchall()

    if rows:
        for row in rows:
            file_id, name, years, city, stat = row
            bot.send_photo(message.chat.id, file_id, caption=f'‚òòÔ∏è–ò–º—è: {name}, {years} —Ä–æ–∫—ñ–≤\n\n üåá–ú—ñ—Å—Ç–æ: {city} \n\n ‚≠ê–°—Ç–∞—Ç—å: {stat}')
    else:
        bot.send_message(message.chat.id, '–ê–Ω–∫–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—ñ—Ç—å —ó—óüòÅ')
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ê–Ω–∫–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        bot.register_next_step_handler(message, bibinto)
        return
    cursor.close()
    conn.close()

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ—Å–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ê–Ω–∫–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫üëç"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§')
    btn2 = types.KeyboardButton('–û—Ü—ñ–Ω—é–≤–∞—Ç–∏üëÄ')
    markup.row(btn1, btn2)
    btn3 = types.KeyboardButton('–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æüîÅ')
    btn4 = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üìã')
    markup.row(btn3,btn4)
    bot.send_message(message.chat.id, '–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫üëç', reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    bibinto(message)

def refka(message):
    user_id = message.from_user.id
    referral_link = f'https://t.me/MimintoBOT?start={user_id}'
    bot.send_message(message.chat.id, f"–í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {referral_link}")

bot.polling(none_stop=True)

